#!/usr/bin/env bash
#
# setup_nvim_v18.sh
#
# Installs vim-plug (if necessary) and generates a modern Neovim
# configuration at ~/.config/nvim/init.vim, plus shell ftplugins.
#
# Features
# ────────────────────────────────────────────────────────────────
# • Gruvbox (dark|light), Tree-sitter highlight
# • TS indent disabled only for shell (bash/sh/zsh)
# • Telescope (+fzf-native), LSP (Mason, mason-lspconfig), cmp, LuaSnip
# • Git signs, buffer/status lines, which-key, autopairs, todo, trouble
# • Conform: Black for Python; shfmt for shell with preview+confirm
# • Key: <leader>sf → shfmt preview+confirm
# • Cmd: :ShfmtConfirmToggle → ask on save (default: off)
#
# Usage
# ────────────────────────────────────────────────────────────────
#   ./setup_nvim_v18.sh [-b|--backup] [--light] [-t THEME] [--install-tools]
#
#   -b | --backup        Back up existing init.vim and plug.vim
#   --light              Use the *light* Gruvbox palette
#   -t  | --theme THEME  Override colourscheme (default: gruvbox)
#   --install-tools      Headless install of Mason tools (shfmt, shellcheck, bash-ls, pyright, lua_ls, ruff_lsp)
#   -h  | --help         Show this help
#
# Requires: curl • git • a C compiler (for Telescope fzf-native)
# Tested with Neovim ≥ 0.9 (LuaJIT 5.1)

set -euo pipefail

#######################
# Default parameters
#######################
NVIM_DIR="$HOME/.config/nvim"
INIT_VIM="$NVIM_DIR/init.vim"
AFTER_DIR="$NVIM_DIR/after/ftplugin"
PLUG_VIM="$HOME/.local/share/nvim/site/autoload/plug.vim"
PLUG_URL="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"

BACKUP=false
THEME="gruvbox"
VARIANT="dark"              # toggled to 'light' by --light
INSTALL_TOOLS=false

usage() {
  cat <<'EOF'
# setup_nvim_v18 — bootstrap a modern Neovim config (safe shell formatting)

Usage:
  setup_nvim_v18.sh [-b|--backup] [--light] [-t THEME] [--install-tools]

Options:
  -b, --backup         Backup existing init.vim and plug.vim
  --light              Use Gruvbox light variant
  -t, --theme THEME    Override colourscheme (default: gruvbox)
  --install-tools      Headless install of Mason tools (shfmt, shellcheck, bash-language-server, pyright, lua_ls, ruff_lsp)
  -h, --help           Show this help

Keybindings inside Neovim:
  <leader>sf           Run shfmt with side-by-side diff and confirm apply
Commands:
  :ShfmtConfirmToggle  Toggle "confirm on save" for shell buffers (off by default)
EOF
  exit 0
}

#######################
# Parse CLI arguments
#######################
while [[ $# -gt 0 ]]; do
  case "$1" in
    -b|--backup) BACKUP=true; shift ;;
    --light)     VARIANT="light"; shift ;;
    -t|--theme)  THEME="${2:?Missing theme}"; shift 2 ;;
    --install-tools) INSTALL_TOOLS=true; shift ;;
    -h|--help)   usage ;;
    *) echo "Unknown option: $1"; usage ;;
  esac
done

#######################
# Install vim-plug
#######################
install_plug() {
  if [[ -f $PLUG_VIM ]]; then
    echo "→ vim-plug already present."
    $BACKUP && { echo "  Backing up plug.vim"; mv -v "$PLUG_VIM" "${PLUG_VIM}.bak"; }
  fi
  echo "→ Installing/refreshing vim-plug..."
  curl -fsLo "$PLUG_VIM" --create-dirs "$PLUG_URL"
}

#######################
# Generate init.vim
#######################
create_config() {
  echo "→ Writing $INIT_VIM"
  mkdir -p "$NVIM_DIR"

  cat > "$INIT_VIM" << 'EOF'
"=====================================================================
"  init.vim  —  generated by setup_nvim_v18.sh
"=====================================================================

" ── Plugin manager ───────────────────────────────────────────────
call plug#begin('~/.vim/plugged')

" ► Theme & UI
Plug 'ellisonleao/gruvbox.nvim'
Plug 'nvim-lualine/lualine.nvim'
Plug 'akinsho/bufferline.nvim'
Plug 'lukas-reineke/indent-blankline.nvim'
Plug 'norcalli/nvim-colorizer.lua'
Plug 'goolord/alpha-nvim'
Plug 'folke/noice.nvim'

" ► Core dependency (Telescope & helpers)
Plug 'nvim-lua/plenary.nvim'

" ► Navigation & Search
Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.2' }
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }
Plug 'folke/which-key.nvim'

" ► File explorer
Plug 'nvim-tree/nvim-tree.lua'
Plug 'nvim-tree/nvim-web-devicons'

" ► Syntax & visuals
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'HiPhish/rainbow-delimiters.nvim'

" ► Git
Plug 'lewis6991/gitsigns.nvim'
Plug 'tpope/vim-fugitive'

" ► LSP & Completion
Plug 'williamboman/mason.nvim'
Plug 'williamboman/mason-lspconfig.nvim'
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'saadparwaiz1/cmp_luasnip'
Plug 'L3MON4D3/LuaSnip'

" ► Formatting & Linting
Plug 'stevearc/conform.nvim'           " formatter runner (Black, shfmt)
Plug 'astral-sh/ruff-lsp'              " Ruff diagnostics via LSP

" ► QoL
Plug 'windwp/nvim-autopairs'
Plug 'folke/todo-comments.nvim'
Plug 'folke/trouble.nvim'

call plug#end()

" ── Basic options ────────────────────────────────────────────────
set number relativenumber
set signcolumn=yes
set cursorline
set termguicolors
set background=dark     " overridden by Lua based on GX_VARIANT
set mouse=a
set updatetime=300
set completeopt=menuone,noselect

" Sensible indentation defaults (spaces, width 2)
set expandtab shiftwidth=2 softtabstop=2 tabstop=2 shiftround
set autoindent
" Avoid smartindent for shell; we rely on ftplugins/shfmt.

" ── Theme, statusline, bufferline, etc. (Lua) ────────────────────
lua << LUA_END
--------------------------------------------------------------------
-- Abort early during bootstrap (headless PlugInstall)
if vim.env.NVIM_BOOTSTRAP == '1' then return end

--------------------------------------------------------------------
-- Colourscheme
--------------------------------------------------------------------
local variant   = vim.env.GX_VARIANT or 'dark'   -- injected by shell
local contrast  = (variant == 'dark') and 'hard' or 'soft'

require('gruvbox').setup({
  contrast  = contrast,
  italic    = { strings = false, comments = true },
  overrides = { SignColumn = { bg = 'none' } },
})
vim.o.background = variant
vim.cmd('colorscheme ' .. (vim.env.GX_THEME or 'gruvbox'))

--------------------------------------------------------------------
-- Lualine + Bufferline
--------------------------------------------------------------------
require('lualine').setup({
  options = {
    theme = 'gruvbox',
    icons_enabled = true,
    section_separators = '',
    component_separators = '',
  },
})
require('bufferline').setup({
  options = {
    mode = 'tabs',
    separator_style = 'slant',
    always_show_bufferline = true,
  },
})

--------------------------------------------------------------------
-- Treesitter: keep highlight; disable indent for shell
--------------------------------------------------------------------
require('nvim-treesitter.configs').setup({
  ensure_installed = { 'bash', 'lua', 'python', 'vim', 'markdown' },
  highlight = { enable = true },
  indent = { enable = true, disable = { 'bash', 'sh', 'zsh' } },
})

--------------------------------------------------------------------
-- Telescope
--------------------------------------------------------------------
require('telescope').setup({
  defaults = { layout_config = { horizontal = { preview_width = 0.55 } } },
})
pcall(require('telescope').load_extension, 'fzf')

--------------------------------------------------------------------
-- Gitsigns
--------------------------------------------------------------------
require('gitsigns').setup()

--------------------------------------------------------------------
-- Completion
--------------------------------------------------------------------
local cmp = require('cmp')
cmp.setup({
  mapping = cmp.mapping.preset.insert(),
  sources = { { name = 'nvim_lsp' }, { name = 'luasnip' } },
})

--------------------------------------------------------------------
-- LSP via Mason
--------------------------------------------------------------------
require('mason').setup()
require('mason-lspconfig').setup({
  ensure_installed = { 'pyright', 'lua_ls', 'bashls' },
  handlers = {
    function(server) require('lspconfig')[server].setup({}) end
  },
})

--------------------------------------------------------------------
-- Conform: Python via Black; shell via shfmt (manual confirm flow)
--------------------------------------------------------------------
local conform = require('conform')
conform.setup({
  formatters_by_ft = {
    python = { 'black' },
    sh     = { 'shfmt' },
    bash   = { 'shfmt' },
    zsh    = { 'shfmt' },
  },
  -- No automatic format_on_save; we provide preview+confirm instead.
})

-- Optional: pin shfmt style (2 spaces, indent switch cases, simplify redirects)
conform.formatters.shfmt = {
  prepend_args = { "-i", "2", "-ci", "-sr" },
}

--------------------------------------------------------------------
-- Ruff diagnostics (keep Black as formatter)
--------------------------------------------------------------------
local lspconfig = require('lspconfig')
lspconfig.ruff_lsp.setup({
  on_attach = function(client, _)
    client.server_capabilities.documentFormattingProvider = false
  end,
})

--------------------------------------------------------------------
-- QoL
--------------------------------------------------------------------
require('nvim-autopairs').setup()
require('which-key').setup()
require('todo-comments').setup()
require('trouble').setup()
require('nvim-tree').setup()
require('colorizer').setup()

--------------------------------------------------------------------
-- shfmt preview + confirm (no surprises)
--------------------------------------------------------------------
local function shfmt_preview_confirm()
  local ft = vim.bo.filetype
  if not (ft == 'sh' or ft == 'bash' or ft == 'zsh') then
    vim.notify("shfmt: not a shell buffer (ft=" .. ft .. ")", vim.log.levels.WARN)
    return
  end

  -- Capture current buffer as list of lines
  local bufnr = vim.api.nvim_get_current_buf()
  local original = vim.api.nvim_buf_get_lines(bufnr, 0, -1, false)

  -- Write to temp file and run shfmt on it (Neovim 0.9-safe)
  local tmp = vim.fn.tempname()
  vim.fn.writefile(original, tmp)
  local cmd = 'shfmt -i 2 -ci -sr ' .. vim.fn.shellescape(tmp)
  local ok, formatted_lines = pcall(vim.fn.systemlist, cmd)
  vim.fn.delete(tmp)

  if not ok then
    vim.notify("shfmt failed to run.", vim.log.levels.ERROR)
    return
  end
  if vim.v.shell_error ~= 0 then
    vim.notify("shfmt error:\n" .. table.concat(formatted_lines or {}, "\n"), vim.log.levels.ERROR)
    return
  end

  -- Compare
  local same = (#original == #formatted_lines)
  if same then
    for i = 1, #original do
      if original[i] ~= formatted_lines[i] then same = false; break end
    end
  end
  if same then
    vim.notify("shfmt: no changes.", vim.log.levels.INFO)
    return
  end

  -- Open a transient side-by-side diff: left = current, right = formatted
  local curwin = vim.api.nvim_get_current_win()
  vim.cmd('vsplit')
  local rightwin = vim.api.nvim_get_current_win()
  local tmpbuf = vim.api.nvim_create_buf(false, true) -- scratch
  vim.api.nvim_win_set_buf(rightwin, tmpbuf)
  vim.api.nvim_buf_set_lines(tmpbuf, 0, -1, false, formatted_lines)

  -- Turn on diff
  vim.cmd('diffthis')             -- right pane
  vim.api.nvim_set_current_win(curwin)
  vim.cmd('diffthis')             -- left pane

  local choice = vim.fn.confirm("Apply shfmt changes?", "&Apply\n&Reject", 2)
  -- Clean up diff view
  vim.cmd('diffoff!')
  vim.api.nvim_set_current_win(rightwin)
  vim.api.nvim_win_close(rightwin, true)
  if vim.api.nvim_buf_is_valid(tmpbuf) then
    vim.api.nvim_buf_delete(tmpbuf, { force = true })
  end
  vim.api.nvim_set_current_win(curwin)

  if choice == 1 then
    vim.api.nvim_buf_set_lines(bufnr, 0, -1, false, formatted_lines)
    vim.notify("Applied shfmt changes.", vim.log.levels.INFO)
  else
    vim.notify("Rejected shfmt changes.", vim.log.levels.INFO)
  end
end

-- Expose as command and keybinding
vim.api.nvim_create_user_command('ShfmtPreview', shfmt_preview_confirm, {})
vim.keymap.set('n', '<leader>sf', shfmt_preview_confirm, { desc = 'shfmt preview+confirm' })

-- Optional: ask on save (off by default)
vim.g.shfmt_confirm_on_save = false
vim.api.nvim_create_user_command('ShfmtConfirmToggle', function()
  vim.g.shfmt_confirm_on_save = not vim.g.shfmt_confirm_on_save
  vim.notify('shfmt confirm-on-save: ' .. tostring(vim.g.shfmt_confirm_on_save))
end, {})

vim.api.nvim_create_autocmd('BufWritePre', {
  pattern = { '*.sh', '*.bash', '*.zsh' },
  callback = function()
    if vim.g.shfmt_confirm_on_save then
      shfmt_preview_confirm()
    end
  end,
})

LUA_END

" ── Python 100-col guide (kept) ──────────────────────────────────
augroup PythonTextwidth
  autocmd!
  autocmd FileType python setlocal colorcolumn=100 textwidth=100 formatoptions+=t
augroup END

" ── Startup helpers ──────────────────────────────────────────────
augroup NvStartup
  autocmd!
  autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) | NvimTreeOpen | endif
augroup END

" Quick-save with Ctrl-s
nnoremap <C-s> :w<CR>
inoremap <C-s> <Esc>:w<CR>a

" Leader keys
nnoremap <Space> <Nop>
let mapleader = " "
let maplocalleader = " "

" =================================================================
"   End of generated init.vim
" =================================================================
EOF
}

#######################
# Write shell ftplugins
#######################
create_ftplugins() {
  echo "→ Writing shell ftplugins under $AFTER_DIR"
  mkdir -p "$AFTER_DIR"

  cat > "$AFTER_DIR/sh.vim" <<'EOF'
" after/ftplugin/sh.vim — predictable shell indent, no custom indentexpr
setlocal expandtab shiftwidth=2 softtabstop=2 tabstop=2 shiftround
setlocal indentexpr=
setlocal formatoptions-=o
setlocal cinoptions=
EOF

  cat > "$AFTER_DIR/bash.vim" <<'EOF'
" after/ftplugin/bash.vim
setlocal expandtab shiftwidth=2 softtabstop=2 tabstop=2 shiftround
setlocal indentexpr=
EOF

  cat > "$AFTER_DIR/zsh.vim" <<'EOF'
" after/ftplugin/zsh.vim
setlocal expandtab shiftwidth=2 softtabstop=2 tabstop=2 shiftround
setlocal indentexpr=
EOF
}

#######################
# Main sequence
#######################
install_plug
create_config
create_ftplugins

# export variant/theme for Lua to read
export GX_VARIANT="$VARIANT"
export GX_THEME="$THEME"

echo "→ Installing/updated plugins (headless)…"
NVIM_BOOTSTRAP=1 nvim --headless +'PlugInstall --sync' +qa

if $INSTALL_TOOLS; then
  echo "→ Installing Mason tools (headless)…"
  NVIM_BOOTSTRAP=0 nvim --headless +'MasonInstall shfmt shellcheck bash-language-server pyright lua-language-server ruff-lsp' +qa || true
fi

echo "✅ Neovim setup complete!"
echo "   Use <leader>sf to preview+confirm shfmt changes in shell files."
echo "   Enable prompt-on-save anytime with :ShfmtConfirmToggle"
