#!/usr/bin/env bash
#
# setup_nvim.sh — v5
#
# Installs vim-plug (if needed), writes a full Neovim init.vim (with
# your core plugins + new suggestions), and then runs PlugInstall.
#

# -------------------------
# Configuration Variables
# -------------------------
NVIM_CONF_DIR="$HOME/.config/nvim"
NVIM_CONF_FILE="$NVIM_CONF_DIR/init.vim"
PLUG_VIM="$HOME/.local/share/nvim/site/autoload/plug.vim"
PLUG_VIM_DIR="$(dirname "$PLUG_VIM")"
PLUG_VIM_URL="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"

# -------------------------
# Function: install_vim_plug
# -------------------------
install_vim_plug() {
    if [ -f "$PLUG_VIM" ]; then
        echo "→ vim-plug already installed at $PLUG_VIM."
        read -r -p "  Backup and reinstall? (y/n): " ans
        if [ "$ans" = "y" ]; then
            mv "$PLUG_VIM" "$PLUG_VIM_DIR/plug_backup.vim"
            echo "  Backed up to plug_backup.vim; reinstalling..."
            curl -fLo "$PLUG_VIM" --create-dirs "$PLUG_VIM_URL"
        else
            echo "  Skipping vim-plug installation."
        fi
    else
        echo "→ Installing vim-plug..."
        curl -fLo "$PLUG_VIM" --create-dirs "$PLUG_VIM_URL"
    fi
}

# -----------------------------
# Function: create_nvim_config
# -----------------------------
create_nvim_config() {
    echo "→ Generating Neovim configuration at $NVIM_CONF_FILE..."
    mkdir -p "$NVIM_CONF_DIR"

    cat << 'NVIM_INIT' > "$NVIM_CONF_FILE"
"==============================================================================
" init.vim — generated by setup_nvim.sh (v5)
"==============================================================================

" Begin plugin section
call plug#begin('~/.vim/plugged')

  " ─────────── Core Utilities ───────────
  Plug 'sheerun/vim-polyglot'          " Syntax highlighting
  Plug 'dense-analysis/ale'            " Asynchronous linting
  Plug 'lewis6991/impatient.nvim'      " Startup speedup
  Plug 'nathom/filetype.nvim'          " Fast filetype detection

  " ─────────── Development Languages ───────────
  Plug 'davidhalter/jedi-vim'          " Python
  Plug 'arzg/vim-sh'                   " Bash
  Plug 'jalvesaq/Nvim-R'               " R
  Plug 'pangloss/vim-javascript'       " JavaScript
  Plug 'leafgarland/typescript-vim'    " TypeScript
  Plug 'peitalin/vim-jsx-typescript'   " JSX + TSX

  " ─────────── UI & Theming ───────────
  Plug 'morhetz/gruvbox'
  Plug 'joshdick/onedark.vim'
  Plug 'arcticicestudio/nord-vim'
  Plug 'ayu-theme/ayu-vim'
  Plug 'NLKNguyen/papercolor-theme'
  Plug 'Mofiqul/dracula.nvim'          " Dracula theme in Lua

  " ─────────── File & Buffer Management ───────────
  Plug 'preservim/nerdtree'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'akinsho/bufferline.nvim', {'tag': 'v2.*'}

  " ─────────── Git Integration ───────────
  Plug 'tpope/vim-fugitive'
  Plug 'lewis6991/gitsigns.nvim'
  Plug 'sindrets/diffview.nvim'
  Plug 'akinsho/git-conflict.nvim'

  " ─────────── Completion & Snippets ───────────
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'hrsh7th/nvim-cmp'
  Plug 'hrsh7th/cmp-nvim-lsp'
  Plug 'hrsh7th/cmp-buffer'
  Plug 'hrsh7th/cmp-path'
  Plug 'hrsh7th/cmp-nvim-lua'
  Plug 'saadparwaiz1/cmp_luasnip'
  Plug 'L3MON4D3/LuaSnip'
  Plug 'rafamadriz/friendly-snippets'

  " ─────────── Treesitter & Syntax ───────────
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  Plug 'nvim-treesitter/playground'
  Plug 'windwp/nvim-ts-autotag'

  " ─────────── LSP & Diagnostics ───────────
  Plug 'neovim/nvim-lspconfig'
  Plug 'j-hui/fidget.nvim'
  Plug 'folke/trouble.nvim'

  " ─────────── Commenting & Pairing ───────────
  Plug 'tpope/vim-commentary'
  Plug 'numToStr/Comment.nvim'
  Plug 'machakann/vim-sandwich'
  Plug 'Yggdroot/indentLine'
  Plug 'jiangmiao/auto-pairs'
  Plug 'windwp/nvim-autopairs'

  " ─────────── Status Line & Key Help ───────────
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'nvim-lualine/lualine.nvim'
  Plug 'folke/which-key.nvim'

  " ─────────── Terminal & Misc ───────────
  Plug 'akinsho/toggleterm.nvim'
  Plug 'tpope/vim-surround'

call plug#end()
" End plugin section

"──────────────────────────────────────────────────────────────────────────────
" General Settings (colorscheme now handled in Lua below)
"──────────────────────────────────────────────────────────────────────────────
set number                      " Show line numbers
set clipboard+=unnamedplus      " Use system clipboard

" Indentation for shell scripts
autocmd FileType sh setlocal shiftwidth=2 tabstop=2

" Keybindings ───────────────────────────────────────────────────────────────
nnoremap <C-s> :w<CR>            " Quick save
nnoremap <C-h> :bprev<CR>        " Prev buffer
nnoremap <C-l> :bnext<CR>        " Next buffer
nnoremap <C-j> <C-w>j            " Window down
nnoremap <C-k> <C-w>k            " Window up
nnoremap <C-h> <C-w>h            " Window left
nnoremap <C-l) <C-w>l            " Window right
nnoremap <C-p> :Files<CR>        " FZF file search
nnoremap <C-/> :Commentary<CR>   " Toggle comment
nnoremap <C-n> :NERDTreeToggle<CR> " Toggle file explorer

" ALE linters
let g:ale_linters = {
\   'python':    ['flake8'],
\   'sh':        ['shellcheck'],
\   'javascript':['eslint'],
\   'typescript':['tslint'],
\}

" CoC global extensions
let g:coc_global_extensions = [
\ 'coc-pyright',
\ 'coc-tsserver',
\ 'coc-json',
\ 'coc-html',
\ 'coc-css'
\]

"──────────────────────────────────────────────────────────────────────────────
" Lua-based plugin configuration
"──────────────────────────────────────────────────────────────────────────────

lua << 'LUA_CONFIG'
-- Speed up startup by caching Lua modules
require('impatient')

-- Treesitter setup (highlight, playground, autotag)
require('nvim-treesitter.configs').setup {
  auto_install = true,
  highlight    = { enable = true },
  playground   = { enable = true },
  autotag      = { enable = true },
}

-- LSP progress UI
require('fidget').setup{}

-- Diagnostics list keymap
vim.api.nvim_set_keymap(
  "n", "<leader>xx", "<cmd>TroubleToggle<CR>",
  { silent = true, noremap = true }
)

-- Toggleable terminal
require("toggleterm").setup{
  size             = 20,
  open_mapping     = [[<c-\>]],
  shade_terminals  = true,
}

-- Comment.nvim
require('Comment').setup{}

-- Autopairs
require('nvim-autopairs').setup{}

-- Lualine statusline with extras from nvim-lualine/lualine.nvim
require('lualine').setup {
  options = {
    theme            = 'dracula',
    icons_enabled    = true,
    component_separators = { left = '', right = '' },
    section_separators   = { left = '', right = '' },
    globalstatus     = true,
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'branch', 'diff', 'diagnostics'},
    lualine_c = {'filename'},
    lualine_x = {'encoding', 'fileformat', 'filetype'},
    lualine_y = {'progress'},
    lualine_z = {'location'}
  },
  tabline = {
    lualine_a = {'buffers'},
    lualine_z = {'tabs'}
  },
  extensions = {'quickfix', 'fzf', 'toggleterm', 'fugitive', 'trouble'}
}

-- Dracula theme activation
require('dracula').setup({})
vim.cmd("colorscheme dracula")
LUA_CONFIG

NVIM_INIT
}

# -----------------------------
# Main Script Execution
# -----------------------------
install_vim_plug
create_nvim_config

echo "→ Installing plugins via Neovim…"
nvim +PlugInstall +qall

echo "✅ Neovim setup complete!"
