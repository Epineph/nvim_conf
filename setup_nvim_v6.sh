#!/usr/bin/env bash
#
# setup_nvim_v2.sh
#
# Description: Installs vim-plug (if necessary), generates a Neovim
# configuration at ~/.config/nvim/init.vim with an enhanced plugin suite,
# Gruvbox theme customization, and additional productivity features.
#
# Usage: ./setup_nvim_v2.sh [-b | --backup] [-t THEME]
#
# Options:
#   -b, --backup      Backup existing init.vim and vim-plug before reinstalling
#   -t, --theme THEME Specify colorscheme (default: gruvbox)
#

set -euo pipefail

# -------------------------
# Default Configuration
# -------------------------
NVIM_CONF_DIR="$HOME/.config/nvim"
NVIM_CONF_FILE="$NVIM_CONF_DIR/init.vim"
PLUG_VIM="$HOME/.local/share/nvim/site/autoload/plug.vim"
PLUG_VIM_DIR="$(dirname "$PLUG_VIM")"
PLUG_VIM_URL="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
BACKUP=false
THEME="gruvbox"

# -------------------------
# Help / Usage Function
# -------------------------
usage() {
  cat << EOF
Usage: $0 [options]

Options:
  -b, --backup        Backup existing config and vim-plug before reinstalling
  -t, --theme THEME   Choose colorscheme (default: gruvbox)
  -h, --help          Display this help and exit
EOF
  exit 0
}

# -------------------------
# Parse Command-Line Arguments
# -------------------------
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -b|--backup) BACKUP=true; shift;;
    -t|--theme) THEME="$2"; shift 2;;
    -h|--help) usage;;
    *) echo "Unknown option: $1"; usage;;
  esac
done

# -------------------------
# Function: install_vim_plug
# -------------------------
install_vim_plug() {
    if [ -f "$PLUG_VIM" ]; then
        echo "→ vim-plug already detected at $PLUG_VIM"
        if [ "$BACKUP" = true ]; then
            echo "  Backing up existing plug.vim to plug.vim.bak"
            mv "$PLUG_VIM" "${PLUG_VIM}.bak"
        fi
        echo "  Reinstalling vim-plug..."
        curl -fLo "$PLUG_VIM" --create-dirs "$PLUG_VIM_URL"
    else
        echo "→ Installing vim-plug..."
        curl -fLo "$PLUG_VIM" --create-dirs "$PLUG_VIM_URL"
    fi
}

# -----------------------------
# Function: create_nvim_config
# -----------------------------
create_nvim_config() {
    echo "→ Generating Neovim configuration at $NVIM_CONF_FILE"
    mkdir -p "$NVIM_CONF_DIR"
    cat <<- 'EOF' > "$NVIM_CONF_FILE"
"==============================================================================
" init.vim — generated by setup_nvim_v2.sh
"==============================================================================

" ------------------------
" Plugin Manager Setup
" ------------------------
call plug#begin('~/.vim/plugged')

  " Core Utilities
  Plug 'nvim-lua/plenary.nvim'          " Lua helper functions
  Plug 'nvim-lua/popup.nvim'            " An implementation of Popup API

  " Fuzzy Finder & Telescope
  Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.2' }

  " Gruvbox Theme (Lua & Vim)
  Plug 'morhetz/gruvbox'                " Classic Gruvbox
  Plug 'ellisonleao/gruvbox.nvim'       " Native Lua Gruvbox

  " Status Line & Buffer Line
  Plug 'nvim-lualine/lualine.nvim'      " Highly customizable statusline
  Plug 'akinsho/bufferline.nvim', { 'tag': 'v3.*' }

  " File Explorer
  Plug 'nvim-tree/nvim-tree.lua'        " File tree explorer

  " Project Management
  Plug 'ahmedkhalf/project.nvim'        " Automatic project detection

  " Treesitter & Syntax
  Plug 'nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate' }
  Plug 'nvim-treesitter/playground'     " Interactive Treesitter explorer

  " LSP & Autocompletion
  Plug 'neovim/nvim-lspconfig'          " LSP configurations
  Plug 'williamboman/mason.nvim'        " LSP/DAP/Linter installer
  Plug 'williamboman/mason-lspconfig.nvim'
  Plug 'hrsh7th/nvim-cmp'               " Completion engine
  Plug 'hrsh7th/cmp-nvim-lsp'
  Plug 'hrsh7th/cmp-buffer'
  Plug 'hrsh7th/cmp-path'
  Plug 'hrsh7th/cmp-cmdline'
  Plug 'L3MON4D3/LuaSnip'               " Snippet engine
  Plug 'rafamadriz/friendly-snippets'   " Predefined snippets

  " Git Integration
  Plug 'lewis6991/gitsigns.nvim'        " Git signs in gutter
  Plug 'sindrets/diffview.nvim'         " Git diff viewer

  " UI & Productivity Enhancements
  Plug 'lukas-reineke/indent-blankline.nvim' " Indentation guides
  Plug 'nvim-telescope/telescope-project.nvim'
  Plug 'rcarriga/nvim-notify'           " Fancy notifications
  Plug 'glepnir/dashboard-nvim'         " Startup dashboard
  Plug 'tpope/vim-surround'             " Surround text objects
  Plug 'numToStr/Comment.nvim'          " Lua commenting
  Plug 'windwp/nvim-autopairs'          " Autoclose brackets, quotes
  Plug 'folke/which-key.nvim'           " Keybinding hints
  Plug 'folke/zen-mode.nvim'            " Distraction-free coding
  Plug 'folke/twilight.nvim'            " Dim inactive code

call plug#end()

" ------------------------
" Gruvbox Theme Settings
" ------------------------
let g:gruvbox_contrast_dark = 'hard'
let g:gruvbox_material_enable_italic = 1
let g:gruvbox_material_palette = 'mix'
set termguicolors                                     " Enable 24-bit colors
set background=dark
colorscheme " + THEME + "

" ------------------------
" General Editor Options
" ------------------------
set number                   " Show absolute line numbers
set relativenumber           " Show relative line numbers
set cursorline               " Highlight current line
set clipboard=unnamedplus    " Use system clipboard
set mouse=a                  " Enable mouse support
set hidden                   " Enable background buffers
set signcolumn=yes           " Always show sign column

" ------------------------
" Key Mappings
" ------------------------
nnoremap <C-s> :w<CR>        " Save file
nnoremap <C-p> :Telescope find_files<CR> " Telescope file search
nnoremap <leader>ff :Telescope live_grep<CR> " Telescope live grep
nnoremap <leader>fb :Telescope buffers<CR>  " List open buffers
nnoremap <leader>fg :Telescope git_files<CR>

" ------------------------
" Lua-based Configuration (after/plugin/*.lua)
" ------------------------
lua << EOF
-- Performance
require('impatient')

-- Treesitter
require('nvim-treesitter.configs').setup {
  ensure_installed = 'maintained',
  highlight = { enable = true },
  playground = { enable = true },
}

-- Mason (LSP Installer)
require('mason').setup()
require('mason-lspconfig').setup({ ensure_installed = { 'pyright', 'tsserver', 'gopls' } })

-- LSP Config
local lspconfig = require('lspconfig')
lspconfig.pyright.setup {}
lspconfig.tsserver.setup {}

-- CMP (Completion)
local cmp = require('cmp')
cmp.setup {
  snippet = { expand = function(args) require('luasnip').lsp_expand(args.body) end },
  mapping = cmp.mapping.preset.insert({ ['<C-Space>'] = cmp.mapping.complete() }),
  sources = cmp.config.sources({ { name = 'nvim_lsp' }, { name = 'buffer' } }),
}

-- Telescope
require('telescope').setup{}
require('telescope').load_extension('project')

-- Project
require('project_nvim').setup {}

-- Dashboard
require('dashboard').setup{}

-- Notify
require('notify').setup { stages = 'fade', timeout = 3000 }

-- Which-key
require('which-key').setup {}

-- Autopairs & Comment
require('nvim-autopairs').setup {}
require('Comment').setup {}

-- Zen & Twilight
require('zen-mode').setup {}
require('twilight').setup {}
EOF
EOF
}

# -----------------------------
# Main Script Execution
# -----------------------------
install_vim_plug
create_nvim_config

echo "→ Installing plugins via Neovim (this may take a few minutes)..."
nvim +PlugInstall +qall

echo "✅ Neovim setup with Gruvbox theme and enhanced plugins complete!"

